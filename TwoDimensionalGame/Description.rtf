{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;}
\margl1440\margr1440\vieww14460\viewh11740\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs28 \cf2 \
\

\b\fs32 \cf0 PROJECT 2 DESCRIPTION\

\b0\fs28 \cf2 \
In this project, you will complete a simple game in which a player moves around a two-dimensional grid. \
\
Most of the logic is already given to you in a model class, and you will not have to use Autolayout constraints. \
\
In the game, the player can either move North, East, West, or South. The player's current position on the game grid will be defined by an (x,y) coordinate, and should be updated in a label on the screen.\
\
- The 
\b grid size
\b0  is from -2 to +2 for both x and y values. The player will start at the origin (0,0).\
\
- When a player hits a grid boundary, the appropriate direction buttons must be disabled. \
\
- If a player successfully moves in a certain direction, display that in the direction message label after they move.\
\
- At certain locations of your choosing, make some special events occur (they're just messages that will display on screen). Use a different label from the direction message label.\
\
- If the player taps the reset button, it should look like the start position again.\
\
See the 
\b \cf0 Screenshots folder
\b0 \cf2  for what the basic interface should look like at various points.\
\
\
\
\
\
\
}